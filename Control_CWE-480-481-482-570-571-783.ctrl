main()
{
// CWE-480	Использование неверного оператора.
// CWE-481	Присваивание вместо сравнения.
// CWE-482	Сравнение вместо присваивания.
// CWE-570	Выражение всегда ложно.
// CWE-571	Выражение всегда истинно.  
// CWE-783	Ошибки, связанные с приоритетом операторов.

  int i;
  int k1 = 0;
  int k2 = 0;
  int k3 = 0;
  int k482 = 0;
     
  int a  = 1;
  int b  = 2;
  bool res;
  
  res = (a && b);
  DebugN("CWE-480	Использование неверного оператора. Логическое сравнение", res); // 1 
  res = (a & b); 
  DebugN("CWE-480	Использование неверного оператора. Побитовое сравнение", res);  // 0

  res = (a == b && false);
  DebugN("CWE-570	Выражение всегда ложно", res); // 0 // false && false
  res = (a == b || true);
  DebugN("CWE-571	Выражение всегда истинно", res);// 1 // false || true
  
  res = (a == (b && false));
  DebugN("CWE-783	Ошибки, связанные с приоритетом операторов", res); // 0  // 1 == false
  res = ((a-1) == (b && false));
  DebugN("CWE-783	Ошибки, связанные с приоритетом операторов", res); // 1  // 0 == false
  
  res = (a == (b || true));
  DebugN("CWE-783	Ошибки, связанные с приоритетом операторов", res); // 1  // 1 == true
  res = ((a-1) == (b || true));
  DebugN("CWE-783	Ошибки, связанные с приоритетом операторов", res); // 0  // 0 == true
  
  for (int j = 1; j <= 100; j++)
  {
    i = rand() % 10; 
    if (i == 1) k1++; // Подсчет 1
    if (i == 1) k482 == k482 + 1;   // CWE-482	Сравнение вместо присваивания
    if (i  = 2) k2++; // Подсчет 2  // CWE-481	Присваивание вместо сравнения.
    if (i == 3) k3++; // Подсчет 3
  };

  DebugN(k1);        // реальный подсчет количества!
  DebugN(k482);      //   0 
  DebugN(k2);        // 100
  DebugN(k3);        //   0 - никогда не выполнится, т.к. i присваивается 2 
}